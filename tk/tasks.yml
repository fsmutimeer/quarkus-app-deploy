apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
  namespace: feroz-shah-dev
spec:
  params:
    - name: url
      type: string
    - name: revision
      type: string
      default: "main"
    - name: subdirectory
      type: string
      default: ""
    - name: deleteExisting
      type: string
      default: "false"
  workspaces:
    - name: output
  steps:
    - name: clone
      image: alpine/git
      script: |
        #!/bin/sh
        set -e
        if [ "$(params.deleteExisting)" = "true" ]; then
          rm -rf $(workspaces.output.path)/$(params.subdirectory)
        fi
        git clone --depth=1 -b $(params.revision) $(params.url) $(workspaces.output.path)/$(params.subdirectory)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
  namespace: feroz-shah-dev
spec:
  params:
    - name: IMAGE
      type: string
    - name: DOCKERFILE
      type: string
    - name: git-commit-id
      type: string
  workspaces:
    - name: source
  steps:
    - name: build
      image: quay.io/buildah/stable
      securityContext:
        privileged: true
      script: |
        #!/bin/sh
        set -e
        cd $(workspaces.source.path)
        buildah bud -f $(params.DOCKERFILE) -t $(params.IMAGE) .
        buildah push $(params.IMAGE)

--- 

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-commit
  namespace: feroz-shah-dev
spec:
  params:
    - name: url
      type: string
    - name: revision
      type: string
    - name: username
      type: string
    - name: useremail
      type: string
    - name: git-commit-id
      type: string
    - name: image-tag
      type: string
    - name: IMAGE
      type: string
    - name: deployment-name
      type: string
  workspaces:
    - name: output
  steps:
    - name: commit
      image: alpine/git
      script: |
        #!/bin/sh
        set -e
        cd $(workspaces.output.path)
        git config --global user.name "$(params.username)"
        git config --global user.email "$(params.useremail)"
        git checkout $(params.revision)
        echo "Updating deployment with image: $(params.IMAGE):$(params.image-tag)"
        git commit -am "Updated $(params.deployment-name) deployment with image $(params.IMAGE):$(params.image-tag)"
        git push origin $(params.revision)
